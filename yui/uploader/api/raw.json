{"majorversion": 3, "classmap": {"Uploader": {"name": "Uploader", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying Uploader configuration properties."}], "description": "Uploader creates a file upload widget that allows the user to \nselect or drag+drop multiple files from the desktop into it and\nthen upload multiple files at a time."}], "namespace": "", "module": "gallery-uploader", "events": {"archiveFormatChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "archiveFormatChange", "description": "Fires when the value for the configuration attribute 'archiveFormat' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "qualityChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "qualityChange", "description": "Fires when the value for the configuration attribute 'quality' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fieldNameChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fieldNameChange", "description": "Fires when the value for the configuration attribute 'fieldName' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "filesChanged": {"params": [{"type": "object", "name": "file", "description": "  the file user is trying to remove"}], "description": "Fires after files are added or removed from UI."}, "archiveProgress": {"params": [{"type": "object", "name": "file", "description": "  The file being archived"}, {"type": "object", "name": "progress", "description": "  Object with file and total percent archive progress"}], "description": "Fired as all files are archived and compressed into one.  Progress is real here."}, "varsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "varsChange", "description": "Fires when the value for the configuration attribute 'vars' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uploadResponse": {"params": [{"type": "object", "name": "file", "description": "  The file uploaded"}, {"type": "object", "name": "response", "description": "  Object with a success boolean and data.  Data either contains information\nfrom the server (such as headers, body, statusCode, statusString) or (error, verboseError)."}], "description": "Fired at the end of upload for each file."}, "uploadStart": {"params": [{"type": "array", "name": "files", "description": "  The array of files to be uploaded."}], "description": "Fired after files are archived, start of actual uploading.\npreventDefault cancels upload."}, "fileRemoved": {"params": [{"type": "object", "name": "file", "description": "  the file user is trying to remove"}], "description": "Fires for each file user tries to remove.  preventDefault() keeps file in UI."}, "resizeStart": {"params": [{"type": "array", "name": "files", "description": "  The array of files to be uploaded."}], "description": "Fired after user clicks on Upload button, whether or not there are actually files (images) to resize.\npreventDefault cancels upload."}, "uploadUrlChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "uploadUrlChange", "description": "Fires when the value for the configuration attribute 'uploadUrl' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "maxFileSizeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "maxFileSizeChange", "description": "Fires when the value for the configuration attribute 'maxFileSize' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "archiveStart": {"params": [{"type": "array", "name": "files", "description": "  The array of files to be uploaded.  Images files are resized at this point."}], "description": "Fired after resize completes, whether or not there are actually files to archive (and compress).\npreventDefault cancels upload."}, "resizeWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizeWidthChange", "description": "Fires when the value for the configuration attribute 'resizeWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "mimeTypesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "mimeTypesChange", "description": "Fires when the value for the configuration attribute 'mimeTypes' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "resizeProgress": {"params": [{"type": "object", "name": "file", "description": "  The file being resized"}, {"type": "object", "name": "progress", "description": "  Object with file and total percent resize progress"}], "description": "Fired after progress was made actually resizing an image.  Progress is synthesized and only sent\nfor 0 and 100 percent."}, "archiveComplete": {"description": "Fired when resize is complete."}, "fileAdded": {"params": [{"type": "object", "name": "file", "description": "  the file added via user interaction"}], "description": "Fires for each file added through the file dialog or drag and drop.  \npreventDefault() prevents file from being added to UI."}, "resizeHeightChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "resizeHeightChange", "description": "Fires when the value for the configuration attribute 'resizeHeight' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "timeoutChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeoutChange", "description": "Fires when the value for the configuration attribute 'timeout' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "filesChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "filesChange", "description": "Fires when the value for the configuration attribute 'files' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "cookieChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "cookieChange", "description": "Fires when the value for the configuration attribute 'cookie' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "uploadProgress": {"params": [{"type": "object", "name": "file", "description": "  The file being uploaded"}, {"type": "object", "name": "progress", "description": "  Object with fileSize, fileSent, filePercent, totalSize, totalSent, totalPercent."}], "description": "Fired as files are uploaded.  Note that simultaneous uploads occur, so there's not guarantee as\nto the order in which progress events occur for each file."}, "uploadComplete": {"description": "Fired after all files are uploaded.  preventDefault to handle the UI in a different way.\nBy default, a message is shown and all the files from the list are cleared."}, "resizeComplete": {"description": "Fired when resize is complete."}}, "configs": {"files": {"description": "Array of files that are going to be uploaded.  Each file is a object that\ncontains {name, size, TBD}.", "default": "[]", "readonly": "", "guessedname": "files", "guessedtype": "property", "type": "Array"}, "mimeTypes": {"default": "[]", "type": "Array", "description": "An array of mimeTypes for which the selected files will be filtered", "guessedname": "mimeTypes", "guessedtype": "property"}, "vars": {"default": "null", "type": "Object", "description": "The object containing variables to be sent in the same request as the file upload.", "guessedname": "vars", "guessedtype": "property"}, "maxFileSize": {"default": "2097152 (2MB)", "type": "Number", "description": "Maximum size in bytes of a single file.\tDefault is 2MB.\t Set size to 0 or \nless for no limit.", "guessedname": "maxFileSize", "guessedtype": "property"}, "uploadUrl": {"default": "null", "type": "String", "description": "The URL of the upload script on the server.\tIf this value is not set, \nfiles will not be uploaded.", "guessedname": "uploadUrl", "guessedtype": "property"}, "archiveFormat": {"default": "null", "type": "String", "description": "Set the optional archive + compression format.  When set, all files will be archived\nand compressed (depending on the format) into a single file before upload.  Used\nin conjunction with image resizing, upload speed should improve with less bits\nsent over the wire.\tValid values: ('tar', 'tar-bzip2', 'tar-gzip', 'zip', 'zip-uncompressed').", "guessedname": "archiveFormat", "guessedtype": "property"}, "cookie": {"default": "null (cookie not sent)", "type": "String", "description": "The optional cookie string POSTed to server during upload.", "guessedname": "cookie", "guessedtype": "property"}, "timeout": {"default": "240", "type": "Number", "description": "An optional integer value between 3 and 240s that places an upper bound in seconds on \nhow long to wait without being able to send or receive data from the server (i.e. while \nserver is processing uploaded content). Default is 240s.", "guessedname": "timeout", "guessedtype": "property"}, "resizeWidth": {"default": "0 (don't scale image)", "type": "Number", "description": "Maximum width of an uploaded image.\tBy default, uploaded images are not resized.  Set this\nvalue to non-zero to restrict the size of an image.", "guessedname": "resizeWidth", "guessedtype": "property"}, "fieldName": {"default": "file", "type": "String", "description": "The name of the variable in the POST request containing the file data. \"file\" by default.", "guessedname": "fieldName", "guessedtype": "property"}, "quality": {"default": "80", "type": "Number", "description": "The quality of the scaled image (0-100).\t Lower qualities result in faster operations and \nsmaller file sizes, at the cost of image quality.", "guessedname": "resizeQuality", "guessedtype": "property"}, "resizeHeight": {"default": "0 (don't scale image)", "type": "Number", "description": "Maximum height of an uploaded image. By default, uploaded images are not resized.  Set this\nvalue to non-zero to restrict the size of an image.", "guessedname": "resizeHeight", "guessedtype": "property"}}, "methods": {"_getFileIndex": {"protected": "", "description": "Return index of file indentified by 'id' or return -1.", "guessedname": "_getFileIndex", "guessedtype": "function"}, "hideHover": {"description": "Hides the hover pane.", "guessedname": "hideHover", "guessedtype": "function"}, "getSize": {"parm": "files the array of files to calculate the size for", "description": "Calculates the sum total of all file sizes in the given array.", "guessedname": "getSize", "guessedtype": "function"}, "_fileClickEvent": {"protected": "", "description": "User clicked in uploader body - see if click is on delete button.", "guessedname": "_fileClickEvent", "guessedtype": "function"}, "_uploadStepArchiveFiles": {"protected": "", "description": "Step 3: Archive (and compress) files, if needed.", "guessedname": "_uploadStepArchiveFiles", "guessedtype": "function"}, "_fileAddedListener": {"protected": "", "description": "Display just added file in UI", "guessedname": "_fileAddedListener", "guessedtype": "function"}, "_filesChangedListener": {"protected": "", "description": "Update buttons enabled status and file size label after files are added/removed from UI.", "guessedname": "_filesChangedListener", "guessedtype": "function"}, "showHover": {"description": "Shows the hover pane (different color with strings.drop_files message) when user\nis adding files via drag and drop.  This is automatically called.", "guessedname": "showHover", "guessedtype": "function"}, "showFirst": {"params": [{"type": "", "name": "msg", "description": " the message to display to the user"}], "description": "When the Upload widget first appears, shows the strings.first_text message \nexplaining to the user that drag+drop is available too.\tMessage is automatically\nhidden once the user adds a file.", "guessedname": "showFirst", "guessedtype": "function"}, "_initBody": {"protected": "", "description": "Create the DOM structure for the console body&#8212;where messages are\nrendered.", "guessedname": "_initBody", "guessedtype": "function"}, "getFriendlySize": {"params": [{"type": "", "name": "size", "description": " the size in bytes"}], "description": "Convert number of bytes into human readable string (ala \"2 MB\")", "guessedname": "getFriendlySize", "guessedtype": "function"}, "enableUploadButton": {"params": [{"type": "", "name": "enabled", "description": " the boolean state"}], "description": "Set the enabled state of the Upload button.", "guessedname": "enableUploadButton", "guessedtype": "function"}, "destructor": {"protected": "", "description": "Destructor lifecycle implementation for the Uploader class.\nRemoves and destroys all registered items.", "guessedname": "destructor", "guessedtype": "function"}, "_initHead": {"protected": "", "description": "Create the DOM structure for the header elements.", "guessedname": "_initHead", "guessedtype": "function"}, "hideFirst": {"description": "Hides the first message.\t This is done automatically upon the first user action to add a file.", "guessedname": "hideFirst", "guessedtype": "function"}, "_getNodeOrAncestorWithClass": {"protected": "", "description": "Return the nearest ancestor (including the given node) with the specified className.", "guessedname": "_getNodeOrAncestorWithClass", "guessedtype": "function"}, "_uploadStepButtonClicked": {"protected": "", "description": "Step 1:\tUser clicks on Upload button.", "guessedname": "_uploadStepButtonClicked", "guessedtype": "function"}, "bindUI": {"protected": "", "description": "Initialize BrowserPlus.\tOnce BrowserPlus is ready, _binder takes care of the rest.", "guessedname": "bindUI", "guessedtype": "function"}, "_uploadStepResizeImages": {"protected": "", "description": "Step 2: Resize Images, if needed.", "guessedname": "_uploadStepResizeImages", "guessedtype": "function"}, "_getHandleIndex": {"protected": "", "description": "Search through files array and return index of entry with same handle id.", "guessedname": "_getHandleIndex", "guessedtype": "function"}, "enable": {"description": "Enable the Uploader widget.", "guessedname": "enable", "guessedtype": "function"}, "_binder": {"protected": "", "description": "Attach BrowserPlus specific events to UI after BrowserPlus has been initialized.", "guessedname": "_binder", "guessedtype": "function"}, "_uploadStepComplete": {"protected": "", "description": "Upload is complete.\tShow \"Upload complete\" in progress dialog, which\nuser has to dismiss.", "guessedname": "_uploadStepComplete", "guessedtype": "function"}, "_openFileDialog": {"protected": "", "description": "User clicked Add Files... YAHOO.bp.OpenBrowseDialog called.", "guessedname": "_openFileDialog", "guessedtype": "function"}, "clearFiles": {"description": "Clears the list of files queued for upload.", "guessedname": "clearFiles", "guessedtype": "function"}, "disable": {"description": "Disable the Uploader widget.", "guessedname": "disable", "guessedtype": "function"}, "_isImage": {"protected": "", "description": "Returns true if file's mimetype matches a known image mime type (matches\nimage/gif, image/jpeg, image/pjpeg, image/png)", "guessedname": "_isImage", "guessedtype": "function"}, "hideMessage": {"description": "Hides the message dialog.  Normally, this does not need to be done programmatically,\nas there is a \"Close\" link on the dialog.", "guessedname": "hideMessage", "guessedtype": "function"}, "_progressListener": {"protected": "", "description": "Displays percentage complete for following: resizeProgress, archiveProgress, uploadProgress", "guessedname": "_progressListener", "guessedtype": "function"}, "initializer": {"protected": "", "description": "Initializer lifecycle implementation for the Uploader class. Publishes events,\ninitializes internal properties and subscribes for events.", "guessedname": "initializer", "guessedtype": "function"}, "_uploadStepStart": {"protected": "", "description": "Step 4: Files are process (images resized, files compressed).  Start the upload.", "guessedname": "_uploadStepStart", "guessedtype": "function"}, "_fileRemovedListener": {"protected": "", "description": "Actually remove file from UI and files array.", "guessedname": "_fileRemovedListener", "guessedtype": "function"}, "showProgress": {"description": "Show the progress pane.\tThis is automatically displayed during the upload process.", "guessedname": "showProgress", "guessedtype": "function"}, "disableInput": {"params": [{"type": "", "name": "enabled", "description": " the boolean state"}], "description": "Disable UI from accepting input (drag+drops, add button pushes, upload button pushes).", "guessedname": "disableInput", "guessedtype": "function"}, "_initFoot": {"protected": "", "description": "Create the DOM structure for the footer elements.", "guessedname": "_initFoot", "guessedtype": "function"}, "setFileSize": {"params": [{"type": "", "name": "files", "description": " array.\tSize is automatically calculated from this array and presented in user friendly way."}], "description": "Set file size in the UI.", "guessedname": "setFileSize", "guessedtype": "function"}, "_addFilesToList": {"protected": "", "params": [{"type": "Array", "name": "files", "description": "  files passed dropped or selected by user"}], "description": "Add files to filelist UI.", "guessedname": "_addFilesToList", "guessedtype": "function"}, "enableAddButton": {"params": [{"type": "", "name": "enabled", "description": " the boolean state"}], "description": "Set the enabled state of the Add Files button.", "guessedname": "enableAddButton", "guessedtype": "function"}, "showMessage": {"params": [{"type": "", "name": "msg", "description": " the message to display to the user"}], "description": "Show the message pane.", "guessedname": "showMessage", "guessedtype": "function"}, "_requireServices": {"protected": "", "description": "Calls BrowserPlus require.", "guessedname": "_requireServices", "guessedtype": "function"}, "hideProgress": {"description": "Hides the progress pane.", "guessedname": "hideProgress", "guessedtype": "function"}, "renderUI": {"protected": "", "description": "Creates UI found in Uploader's <code>contentBox</code>.", "guessedname": "renderUI", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "uploader.js", "shortname": "Uploader", "properties": {"Uploader.HEADER_CSS": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nUploader.HEADER_TEMPLATE markup when rendering the Uploader UI.", "guessedname": "HEADER_CSS", "guessedtype": "property"}, "Upload.ATTRS": {"type": "Object", "static": "", "description": "Attribute configuration for the Uploader widget.", "guessedname": "ATTRS", "guessedtype": "property"}, "Uploader.FOOTER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the footer\nsection of the Uploader when it is rendered.", "guessedname": "FOOTER_TEMPLATE", "guessedtype": "property"}, "Uploader.BODY_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the Uploader body.", "guessedname": "BODY_TEMPLATE", "guessedtype": "property"}, "Uploader.BODY_CSS": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nUploader.BODY_TEMPLATE markup when rendering the Uploader UI.", "guessedname": "BODY_CSS", "guessedtype": "property"}, "Uploader.HEADER_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for the header\nsection of the Uploader when it is rendered.", "guessedname": "HEADER_TEMPLATE", "guessedtype": "property"}, "Uploader.ENTRY_TEMPLATE": {"type": "String", "static": "", "description": "Markup template used to generate the DOM structure for a file.  A file\nconsists of a name, size and delete icon.", "guessedname": "ENTRY_TEMPLATE", "guessedtype": "property"}, "Upload.ENTRY_CSS": {"type": "Object", "static": "", "description": "Map (object) of classNames used to populate the placeholders in the\nUploader.ENTRY_TEMPLATE markup when rendering a new Uploader entry.", "guessedname": "ENTRY_CSS", "guessedtype": "property"}, "UPLOADER": {"type": "String", "static": "", "description": "The identity of the widget.", "guessedname": "NAME", "guessedtype": "property"}, "strings": {"description": "The localizable strings for the Uploader.  Values in string object include:\n<ul>\n<li>filename</li>\n<li>size</li>\n<li>close</li>\n<li>add_files</li>\n<li>drop files</li>\n<li>upload</li>\n<li>total</li>\n<li>size_b</li>\n<li>size_kb</li>\n<li>size_mb</li>\n<li>size_gb</li>\n<li>size_tb</li>\n<li>resize_progress</li>\n<li>archive_progress</li>\n<li>upload_progress</li>\n<li>upload_complete</li>\n<li>first_text</li>\n<li>bp_download</li>\n<li>bp_installed</li>\n<li>bp_initfail</li>\n<li>bp_incompatible</li>\n<li>bp_requirefail</li>\n</ul>", "guessedname": "strings", "guessedtype": "property"}}, "description": "Provides a file uploader widget allows a user to select multiple files or drag and drop\nfiles from the desktop into the widget.  Image files are optionally resized.  All files\nmaybe are optionally archived (zip or tar) and compressed (bzip2, gzip, zip) to save\nbandwidth and speed uploads. Cross domain uploads are allowed if the destination \nhost has a master policy file which allows uploads from the source domain  (crossdomain.xml).\nReal upload progress is shown to the user.\n<p>\nUploading to HTTPS is not supported at this time (BrowserPlus Uploader service currently\nlacks support for it)."}}, "version": "1.0.0", "modules": {"gallery-uploader": {"description": "Provides a file uploader widget allows a user to select multiple files or drag and drop\nfiles from the desktop into the widget.  Image files are optionally resized.  All files\nmaybe are optionally archived (zip or tar) and compressed (bzip2, gzip, zip) to save\nbandwidth and speed uploads. Cross domain uploads are allowed if the destination \nhost has a master policy file which allows uploads from the source domain  (crossdomain.xml).\nReal upload progress is shown to the user.\n<p>\nUploading to HTTPS is not supported at this time (BrowserPlus Uploader service currently\nlacks support for it).", "submodules": [], "classlist": ["Uploader", "Uploader"], "filelist": ["uploader.js"], "subdata": {}, "name": "gallery-uploader"}}, "filemap": {"uploader.js": {"classlist": ["Uploader", "Uploader"], "name": "uploader.js", "module": "gallery-uploader"}}}